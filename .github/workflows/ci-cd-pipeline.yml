name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch: # Allows for manual triggering of deployment jobs

jobs:
  validate-terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Validate Terraform configuration
      - name: Terraform Validate
        run: terraform validate

  deploy-dev:
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/dev'
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate-terraform
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Navigate to the dev environment
      - name: Change Directory to Development Environment
        run: cd terraform/environments/dev

      # Apply Terraform in the dev environment
      - name: Terraform Apply (Development)
        env:
          TF_VAR_master_password: ${{ secrets.DB_MASTER_PASSWORD_DEV }}
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

  deploy-prod:
    if: github.event_name == 'workflow_dispatch'
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate-terraform
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Navigate to the prod environment
      - name: Change Directory to Production Environment
        run: cd terraform/environments/prod

      # Apply Terraform in the prod environment
      - name: Terraform Apply (Production)
        env:
          TF_VAR_master_password: ${{ secrets.DB_MASTER_PASSWORD_PROD }}
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
